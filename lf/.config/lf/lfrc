# Basic Settings
set previewer ~/.config/lf/preview
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true
set shellopts '-eu'
set ifs "\n"
set scrolloff 10

### KEYBINDS ###
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Operations
map dd trash-put
map md mkdir
map mf mkfile
map ms mkscript
map me make-executable
map re remove-executable

# Basic Operations
map . set hidden!
map p paste
map x cut
map y copy
map <enter> open
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash
map be trash-empty
map br trash-restore

# Jumping Around The Filesystem
map gh :cd ~
map gc :cd ~/.config
map gd :cd ~/Downloads
map gD :cd ~/Documents
map gv :cd ~/Videos
map gm :cd ~/Music
map gg :cd ~/Github
map gs :cd ~/Github/dotfiles-stow
map gC :cd ~/Github/Catalyst
map gw :cd ~/Pictures/Wallpapers
map gs :cd ~/Pictures/Screenshots
map gp :cd ~/Pictures
map gS :cd ~/Scripts
map gP :cd ~/Projects
map fj fzf_jump

# Executing Scripts
map x $"$f"
map X !"$f"

# Wallpaper
map bg setbg

### CUSTOM COMMANDS ###
cmd open ${{
    mime="$(file --mime-type -Lb "$f")"
    ext="${f##*.}"

    case "$mime" in
        text/*|application/json|application/xml)
            ${EDITOR:-nvim} "$f"
            ;;
        image/*)
            command -v sxiv >/dev/null && sxiv "$f" ||
            command -v imv  >/dev/null && imv "$f"
            ;;
        video/*|audio/*)
            mpv "$f"
            ;;
        application/pdf)
            command -v zathura >/dev/null && zathura "$f" ||
            command -v pdftotext >/dev/null && pdftotext "$f" - | less
            ;;
        *)
            # Fallback on extension if MIME is unrecognized
            case "$ext" in
                txt|md|json|js|sh|py|cpp|c|java|html|css|lua|ts|rs|go|yml|yaml)
                    command -v bat >/dev/null && bat "$f" || ${EDITOR:-nvim} "$f"
                    ;;
                jpg|jpeg|png|gif|bmp|webp|svg)
                    command -v sxiv >/dev/null && sxiv "$f" ||
                    command -v imv  >/dev/null && imv "$f"
                    ;;
                mp4|mkv|webm|avi|mov)
                    mpv "$f"
                    ;;
                mp3|flac|wav|ogg)
                    mpv "$f"
                    ;;
                pdf)
                    command -v zathura >/dev/null && zathura "$f" ||
                    command -v pdftotext >/dev/null && pdftotext "$f" - | less
                    ;;
                toml)
                    ${EDITOR:-nvim} "$f"
                    ;;
                *)
                    xdg-open "$f" >/dev/null 2>&1
                    ;;
            esac
            ;;
    esac
}}

cmd mkdir %{{
  printf " Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  clear
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd mkscript ${{
  clear
  mkscript
  lf -remote 'send reload'
}}

# Filesystem Operations
cmd make-executable %{{
  chmod a+x "$f" && lf -remote 'send reload'
}}

cmd remove-executable %{{
  chmod a-x "$f" && lf -remote 'send reload'
}}

# Trashing 
cmd trash-put %{{
  trash-put $fx
}}

cmd trash-empty ${{
    clear
    printf "Would you like to see what's inside the trash? [y/n]: "
    read -r ans
    case "${ans}" in
        y)
            clear
            echo -e "\033[1mContents of your trash:\033[0m"
            trash-list || echo "Failed to list trash."
            echo
            printf "Empty the trash now? [y/n]: "
            read -r confirm
            case "${confirm}" in
                y) trash-empty -f ;;
                n) echo "Trash not emptied." ;;
                *) echo "Invalid input. Expected 'y' or 'n'." ;;
            esac
            ;;
        n)
            trash-empty -f
            ;;
        *)
            echo "Invalid input. Expected 'y' or 'n'."
            ;;
    esac
}}

cmd trash-restore ${{
  clear
  trash-restore
}}

# Extract Archives
cmd unarchive ${{
  clear
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.rar) unrar x "$f" ;;
      *.7z) 7z x "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Compressing Current Selected File 
cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Fzf Jump
cmd fzf_jump ${{
    # Find directories up to 3 levels deep (excluding .)
    res="$(find . -mindepth 1 -maxdepth 3 -type d 2>/dev/null | fzf \
        --reverse \
        --header='Jump to directory' \
        --preview 'ls -1 --color=always {}' \
        --preview-window=down:10:wrap)"

    # If selected, send 'cd' command to lf
    if [ -n "$res" ]; then
        lf -remote "send $id cd \"$res\""
    fi
}}

# Wallpaper
cmd setbg %{{
  cp "$f" ~/.config/wall.png
  xwallpaper --stretch ~/.config/wall.png
  command rm ~/.config/wall.png
  lf -remote 'send reload'
}}
