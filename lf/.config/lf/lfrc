### BASIC SETTINGS ###
set previewer ~/.config/lf/preview
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true
set scrolloff 10
set shellopts '-eu'
set ifs "\n"

### REMOVE UNUSED DEFAULT BINDS ###
map m
map n
map o
map d
map c
map e
map f
map '"'
map "'"

### CORE NAVIGATION ###
map <enter> open
map r rename
map p paste
map x cut
map y copy
map R reload
map C clear
map U unselect
map H top
map L bottom
map . set hidden!
map ef $echo "$f"

### COMMON JUMP SHORTCUTS ###
map gh :cd ~
map gc :cd ~/.config
map gd :cd ~/Downloads
map gD :cd ~/Documents
map gP :cd ~/Projects
map gs :cd ~/Scripts
map gp :cd ~/Pictures
map gm :cd ~/Music
map gv :cd ~/Videos
map gg :cd ~/Github

### FILE CREATION ###
cmd mk ${{
  printf "Name: "
  read -r name
  [ -z "$name" ] && exit

  printf "Type (dir/file/script/proj): "
  read -r type
  case "$type" in
    dir) mkdir -pv -- "$name" ;;
    file) :> "$name" ;;
    script) mkscript -n "$name" && lf -remote "send $id cd '~/Scripts/'" ;;
    proj) projtool mkproj -n "$name" && lf -remote "send $id cd '~/Projects/$name'" ;;
    *) echo "Unknown type." ;;
  esac
  lf -remote 'send reload'
}}
map mm mk

### DELETE / TRASH ###
cmd trash %{{
	trash-put "$fx"
  lf -remote 'send reload'
}}
cmd remove %{{
	rm -rf "$fx"
  lf -remote 'send reload'
}}
map dd trash
map DD remove

### TOGGLE EXECUTABLE / PERMISSIONS ###
cmd chmod %{{
	printf " Chmod bits (e.g. +x or 644): "
  read -r bits
  [ -n "$bits" ] && chmod "$bits" "$f"
  lf -remote 'send reload'
}}
map et chmod

### ARCHIVE / EXTRACT ###
cmd extract %{{
  case "$f" in
    *.tar*) tar -xf "$f" ;;
    *.zip) unzip "$f" ;;
    *.7z) 7z x "$f" ;;
    *.rar) unrar x "$f" ;;
    *) echo " Unsupported archive" ;;
  esac
  lf -remote 'send reload'
}}
map ex extract

cmd archive %{{
  printf " Archive name (.tar.gz/.zip): "
	read -r out
  [ -z "$out" ] && exit
  case "$out" in
    *.tar.gz) tar -czf "$out" $fs ;;
    *.zip) zip -r "$out" $fs ;;
    *) echo "Use .tar.gz or .zip" ;;
  esac
  lf -remote 'send reload'
}}
map er archive

### FZF JUMP ###
cmd fzf_jump_dir ${{
  res=$(fdfind --type d . | fzf --reverse --preview 'eza -a --tree --group-directories-first --color=always --icons {} || tree -C {} | head -n 20')
  [ -n "$res" ] && lf -remote "send $id cd '$res'"
}}
map fj fzf_jump_dir

cmd fzf_jump_file ${{
  res=$(fdfind --type f . | fzf --reverse --preview 'batcat --color=always --style=numbers {} || cat {}')
  [ -n "$res" ] && lf -remote "send $id cd '$(dirname "$res")'" && ${EDITOR:-nvim} "$res"
}}
map fk fzf_jump_file

### FOLLOW SYMLINK ###
cmd follow-link ${{
  [ ! -L "$f" ] && echo "Not a symlink." && exit
  target=$(readlink -f "$f")
  if [ -d "$target" ]; then
    lf -remote "send $id cd '$target'"
  elif [ -f "$target" ]; then
    lf -remote "send $id cd '$(dirname "$target")'"
    ${EDITOR:-nvim} "$target"
  fi
}}
map gf follow-link

### OPEN FILE ###
cmd open ${{
  mime=$(file --mime-type -Lb "$f")
  ext="${f##*.}"

  case "$mime" in
    text/*|application/json|application/xml)
      ${EDITOR:-nvim} "$f" ;;
    image/*)
      sxiv "$f" 2>/dev/null || imv "$f" 2>/dev/null || chafa "$f" ;;
    video/*|audio/*)
      mpv "$f" ;;
    application/pdf)
      zathura "$f" 2>/dev/null || pdftotext "$f" - | less ;;
    *)
      # fallback based on extension
      case "$ext" in
        sh|py|c|cpp|lua|rs|go|js|ts|md|json|yml|yaml)
          ${EDITOR:-nvim} "$f" ;;
        jpg|jpeg|png|gif|bmp|webp|svg)
          sxiv "$f" 2>/dev/null || imv "$f" ;;
        mp4|mkv|mp3|flac|ogg|wav)
          mpv "$f" ;;
        pdf)
          zathura "$f" 2>/dev/null || pdftotext "$f" - | less ;;
        *) xdg-open "$f" >/dev/null 2>&1 ;;
      esac
      ;;
  esac
}}
map <enter> open

### WALLPAPER ###
cmd setbg ${{
  xwallpaper --stretch "$f" 2>/dev/null || echo "Failed to set wallpaper"
}}
map bg setbg

### DRAG (DRAGON) ###
cmd drag ${{
  dragon -a -x -T "$fx"
}}
map dr drag

